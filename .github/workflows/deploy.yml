name: CI/CD Pipeline for Next.js with AWS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Verify build script
        run: |
          if ! grep -q '"build":' package.json; then
            echo "ERROR: No build script found in package.json!" >&2
            exit 1
          fi

      - name: Build Next.js Application
        run: npm run build

      - name: Run tests
        run: |
          echo "Running tests..."
          npm test || echo "No tests defined or some tests failed."

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Ensures all files are fetched from the repo

    - name: Debug Current Directory
      run: |
        echo "Current directory: $(pwd)"
        ls -la

    - name: Add SSH Key
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/lightsail_key
        chmod 600 ~/.ssh/lightsail_key

    - name: Deploy Next.js Application to AWS Lightsail
      env:
        LIGHTSAIL_IP: "13.43.41.67"
      run: |
        echo "Deploying Next.js application to AWS Lightsail..."

        # Verify that the GitHub workspace exists
        if [ ! -d ${{ github.workspace }} ]; then
          echo "ERROR: GitHub workspace directory does not exist!"
          exit 1
        fi

        # Sync files to the Lightsail instance
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.next/cache' \
          --exclude='.env' \  # Exclude .env from direct sync
          -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/lightsail_key" \
          ${{ github.workspace }}/ ubuntu@$LIGHTSAIL_IP:/var/www/html

        # Securely transfer .env file if exists in GitHub Secrets
        if [ -n "${{ secrets.ENV_FILE }}" ]; then
          echo "${{ secrets.ENV_FILE }}" | base64 --decode | ssh -o StrictHostKeyChecking=no -i ~/.ssh/lightsail_key ubuntu@$LIGHTSAIL_IP "cat > /var/www/html/.env"
        fi

        # SSH into the instance to configure the application
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/lightsail_key ubuntu@$LIGHTSAIL_IP "
          echo 'Configuring Next.js application on Lightsail...'

          # Set correct ownership & permissions
          sudo chown -R ubuntu:ubuntu /var/www/html

          # Navigate to the deployment directory
          cd /var/www/html

          # Ensure dependencies are installed
          npm ci

          # Create swap file to prevent memory issues
          if [ ! -f /swapfile ]; then
            sudo fallocate -l 1G /swapfile
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
            echo '/swapfile swap swap defaults 0 0' | sudo tee -a /etc/fstab
          fi

          # Run Next.js build to generate the '.next' directory
          npm run build

          # Install PM2 globally if not installed
          if ! command -v pm2 &> /dev/null; then
            sudo npm install pm2@latest -g
          fi

          # Start or restart the application using PM2
          pm2 delete nextjs-app || true
          pm2 start npm --name 'nextjs-app' -- start -- -p 4000

          # Save PM2 process for auto-start on reboot
          pm2 save
          pm2 startup
          sudo env PATH=\$PATH:/usr/bin pm2 startup systemd -u ubuntu --hp /home/ubuntu

          # Reload Nginx if being used as a reverse proxy
          if systemctl is-active --quiet nginx; then
            sudo systemctl reload nginx
          fi
        "

    - name: Cleanup
      run: |
        echo "Cleaning up temporary files..."
        rm -f ~/.ssh/lightsail_key
